<?php

//include_once 'includes/spell.inc';
//include_once 'includes/spell_group.inc';

/**
 * Implements hook_menu().
 */
function dd5_spell_menu() {
  $items = array();

  $items['admin/dnd5/spells'] = array(
    'title' => 'D&D Spells',
    'description' => 'D&D Spells related configuration.',
    'position' => 'right',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );




  $items['admin/dnd5/spell-group'] = array(
    'title' => 'D&D Spell Groups',
    'description' => 'D&D Spells groupsrelated configuration.',
    'position' => 'right',
    'weight' => -19,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function dd5_spell_entity_info() {
  $items['spell'] = array(
    'label' => t('Spell'),
    'controller class' => 'SpellController',
    'entity class' => 'Spell',
    'load hook' => 'spell_load',
    'base table' => 'dd5_spell',
    'uri callback' => 'spell_uri',
    'fieldable' => TRUE,
    'revisionable' => FALSE,
    'access callback' => 'spell_entity_access',
    'entity keys' => array(
      'id' => 'spell_id',
      'label' => 'name',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'spell' => array(
        'label' => t('Spell'),
        'admin' => array(
          'path' => 'admin/dnd5/spells/spell-type/manage/%spell_type',
          'bundle argument' => 5,
          'real path' => 'admin/dnd5/spells/spell-type/manage/spell',
          'access callback' => TRUE,
        ),
      ),
      'lleps' => array(
        'label' => t('Lleps'),
        'admin' => array(
          'path' => 'admin/dnd5/spells/spell-type/manage/%spell_type',
          'bundle argument' => 5,
          'real path' => 'admin/dnd5/spells/spell-type/manage/lleps',
          'access callback' => TRUE,
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'module' => 'dd5_spell',
    'views controller class' => 'EntityDefaultViewsController',
    'admin ui' => array(
      'controller class' => 'SpellUIController',
      'path' => 'admin/dnd5/spells/manage',
      'type path' => 'admin/dnd5/spells/spell-type/manage',
      'file' => 'includes/spell.inc',
      'menu wildcard' => '%spell',
    ),
  );

  $items['spell_group'] = array(
    'label' => t('Spell Group'),
    'controller class' => 'SpellGroupController',
    'entity class' => 'SpellGroup',
    'load hook' => 'spell_group_load',
    'base table' => 'dd5_spell_group',
    'uri callback' => 'spell_group_uri',
    'fieldable' => TRUE,
    'revisionable' => FALSE,
    'access callback' => 'spell_group_entity_access',
    'entity keys' => array(
      'id' => 'spell_group_id',
      'label' => 'name',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'spell_group' => array(
        'label' => t('Spell Group'),
        'admin' => array(
          'path' => 'admin/dnd5/spell-group/spell-group-type/manage/%spell_group_type',
          'bundle argument' => 5,
          'real path' => 'admin/dnd5/spell-group/spell-group-type/manage/spell_group',
          'access callback' => TRUE,
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'module' => 'dd5_spell',
    'views controller class' => 'EntityDefaultViewsController',
    'admin ui' => array(
      'controller class' => 'SpellGroupUIController',
      'path' => 'admin/dnd5/spell-group/manage',
      'type path' => 'admin/dnd5/spell-group/spell-group-type/manage',
      'file' => 'includes/spell_group.inc',
      'menu wildcard' => '%spell_group',
    ),
  );

  return $items;
}

function dd5_spell_entity_property_info() {
  $info = array();

  return $info;

}

function dd5_spell_entity_property_info_alter(&$info) {
  $info['spell']['properties']['name']['label'] = 'Spell name';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function dd5_spell_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/dnd5/spells/manage') {
    $item = menu_get_item('admin/dnd5/spells/manage/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }

  if ($root_path == 'admin/dnd5/spell-group/manage') {
    $item = menu_get_item('admin/dnd5/spell-group/manage/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

function _spell_add_access() {
  return TRUE;
}
function _spell_group_add_access() {
  return TRUE;
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function spell_entity_access($op, $entity = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Fetch a model object. Make sure that the wildcard you choose
 * in the model entity definition fits the function name here.
 *
 * @param $model_id
 *   Integer specifying the model id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $model object or FALSE if it cannot be loaded.
 *
 * @see model_load_multiple()
 */
function spell_load($spell_id, $reset = FALSE) {
  $spells = spell_load_multiple(array($spell_id), array(), $reset);
  return reset($spells);
}


/**
 * Load multiple models based on certain conditions.
 *
 * @param $model_ids
 *   An array of model IDs.
 * @param $conditions
 *   An array of conditions to match against the {model} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of model objects, indexed by model_id.
 *
 * @see entity_load()
 * @see model_load()
 */
function spell_load_multiple($spell_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('spell', $spell_ids, $conditions, $reset);
}


function spell_type_load($name) {
  return $name;
}

function spell_uri($spell) {
  return array(
    'path' => 'spell/' . $spell->spell_id,
    'options' => array(

    ),
  );
}




/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function spell_group_entity_access($op, $entity = NULL, $account = NULL) {
  return TRUE;
}

function spell_group_load() {

}

function spell_group_type_load($name) {
  return $name;
}

function spell_group_uri($spell_group) {
  return array(
    'path' => 'spell-group/' . $spell_group->spell_group_id,
    'options' => array(

    ),
  );
}


