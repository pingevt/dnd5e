<?php

/**
 * Implements hook_menu().
 */
function dd5_spell_manager_menu() {
  $items = array();

  $items['character/%character/spell-manager'] = array(
    'title' => t('Spell manager'),
    'page callback' => 'dd5_spell_manager_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['dd5-ajax/spell-manager/spell-prepared/%character/%spell/%'] = array(
    'title' => t('Toggle spell prepared'),
    'page callback' => 'toggle_spell_prepared',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['dd5-ajax/spell-manager/spell-cast/%character/%spell/%/%/%'] = array(
    'title' => t('Toggle spell prepared'),
    'page callback' => 'toggle_spell_cast',
    'page arguments' => array(3, 4, 5, 6, 7),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dd5_spell_manager_permission() {
  return array(
    'use dnd spell manager' => array(
      'title' => t('Use D&D 5e spell manager'),
      'description' => t(''),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dd5_spell_manager_theme($existing, $type, $theme, $path) {
  return array(
    'spell_slot_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
    'spell_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
  );
}

function dd5_spell_manager_page($character) {
  drupal_add_css(drupal_get_path('module', 'dd5_spell_manager') . '/css/spell-manager.css');

  $build = array();

  $build = drupal_get_form('character_spell_manager_form', $character);

  return $build;
}

function character_spell_manager_form($form, &$form_state, $character) {

  // reload character just in case.
  $character = current(entity_load('character', array($character->char_id)));

  // Check previous submissions
  if (isset($form_state['values'])) {
    $character_spell_data = $character->getSpellData();

    // Loop through removals.
    foreach ($form_state['values']['spell_slot_table']['rows'] as $row_id => $row) {
      for ($i=0; $i<=9; $i++) {
        if (isset($row[$i][1]) && $row[$i][1] == TRUE) {
          unset($character_spell_data['cast'][(int) $row[$i][2]]);

          $form_state['values']['spell_slot_table']['rows'][$row_id][$i][1] = FALSE;
          $form_state['input']['spell_slot_table']['rows'][$row_id][$i][1] = NULL;
        }
      }
    }

    // Re-key array
    $character_spell_data['cast'] = array_values($character_spell_data['cast']);

    // Loop through spells.
    foreach ($form_state['values']['spells']['rows'] as $row_id => $row) {
      if ($row['prepared'] == TRUE) {
        $character_spell_data['prepared'][$row['spell_id']] = TRUE;
      }
      else {
        $character_spell_data['prepared'][$row['spell_id']] = FALSE;
      }

      for ($i=0; $i<=9; $i++) {
        if (isset($row[$i]) && $row[$i] == TRUE) {
          $character_spell_data['cast'][] = array(
            'spell' => $row['spell_id'],
            'lvl' => $i,
          );

          $form_state['values']['spells']['rows'][$row_id][$i] = FALSE;
          $form_state['input']['spells']['rows'][$row_id][$i] = NULL;
        }
      }
    }

    // Save data.
    $character->saveSpellData($character_spell_data);

    // reload Character just in case.
    $character = current(entity_load('character', array($character->char_id)));
  }

  // Add collapsable fieldset library.
  drupal_add_library('system', 'drupal.collapse');

  $form = array(
    '#tree' => TRUE,
    '#character' => $character,
    '#attached' => array(
      //'js' => array( drupal_get_path('module', 'dd5_spell_manager') . '/js/spell-manager.js'),
    ),
    '#prefix' => '<div id="form-wrapper">',
    '#suffix' => '</div>',
    'spell_slot_table' => array(
      '#theme' => 'spell_slot_table',
      '#header' => array(
        array('data' => 'Cantrips', 'style' => 'width: 1px'),
        array('data' => '1st', 'style' => 'width: 10%'),
        array('data' => '2nd', 'style' => 'width: 10%'),
        array('data' => '3rd', 'style' => 'width: 10%'),
        array('data' => '4th', 'style' => 'width: 10%'),
        array('data' => '5th', 'style' => 'width: 10%'),
        array('data' => '6th', 'style' => 'width: 10%'),
        array('data' => '7th', 'style' => 'width: 10%'),
        array('data' => '8th', 'style' => 'width: 10%'),
        array('data' => '9th', 'style' => 'width: 10%'),
      ),
      'rows' => array(
        '#tree' => TRUE,
      ),
      '#prefix' => '<div id="spell-slot-table-wrapper">',
      '#suffix' => '</div>',
    ),
    'spell_filters' => array(),
    'spell_order' => array(),
    'spells' => array(
      '#theme' => 'spell_table',
      '#header' => array(
        array('data' => 'P', 'style' => 'width: 1px'),
        array('data' => 'SP Lvl', 'style' => 'width: 1px'),
        array('data' => 'Spell group', 'style' => 'width: 1px'),
        'Spell',
        array('data' => 'Casting Time', 'style' => 'width: 50px'),
        array('data' => 'Range', 'style' => 'width: 50px'),
        array('data' => 'Duration', 'style' => 'width: 50px'),
        array('data' => 'Comp.', 'style' => 'width: 1px'),
        array('data' => '0', 'style' => 'width: 1px'),
        array('data' => '1', 'style' => 'width: 1px'),
        array('data' => '2', 'style' => 'width: 1px'),
        array('data' => '3', 'style' => 'width: 1px'),
        array('data' => '4', 'style' => 'width: 1px'),
        array('data' => '5', 'style' => 'width: 1px'),
        array('data' => '6', 'style' => 'width: 1px'),
        array('data' => '7', 'style' => 'width: 1px'),
        array('data' => '8', 'style' => 'width: 1px'),
        array('data' => '9', 'style' => 'width: 1px'),
      ),
      'rows' => array(
        '#tree' => TRUE,
      ),
    ),
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'dd5_spell_manager') . '/js/spell-manager.js';

  // Initiate variables needed.
  $character_spells = $character->getSpells();
  $character_spell_data = $character->getSpellData();

  $spell_slots = $character->getSpellSlots();
  $character_lvl = $character->getLvl();

  // Spell slot table
  $row = array();
  $row2 = array();

  for ($i=0; $i<=9; $i++) {
    $row[] = array(
      '#markup' => $spell_slots[($character_lvl - 1)][$i],
    );
    $row2[] = array(
      '#markup' => '',
    );
  }
  $form['spell_slot_table']['rows'][] = $row;
  $form['spell_slot_table']['rows'][] = $row2;

  $build_helper = array();

  // Spell slot table
  foreach ($character_spell_data['cast'] as $z => $item) {
    $spell = current(entity_load('spell', array($item['spell'])));

    if (isset($build_helper[$item['lvl']])) {
      $build_helper[$item['lvl']]++;
    }
    else {
      $build_helper[$item['lvl']] = 1;
    }

    // Add in blank cells
    if (!isset($form['spell_slot_table']['rows'][$build_helper[$item['lvl']]])) {
      for ($i=0; $i<=9; $i++) {
        $form['spell_slot_table']['rows'][$build_helper[$item['lvl']]][$i] = array(
          '#markup' => '',
        );
      }
    }

    $form['spell_slot_table']['rows'][$build_helper[$item['lvl']]][$item['lvl']][0] = array(
      '#markup' => $spell->name,
      '#weight' => 10,
    );

    $form['spell_slot_table']['rows'][$build_helper[$item['lvl']]][$item['lvl']][1] = array(
      '#type' => 'checkbox',
      '#title' => t('Remove'),
      '#title_display' => 'invisible',
      '#limit_validation_errors' => FALSE,
      '#ajax' => array(
        'callback' => 'spell_manager_form_replace',
        'wrapper' => 'form-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#attributes' => array(
        'style' => 'float: right',
      ),
      '#weight' => 0,
    );

    $form['spell_slot_table']['rows'][$build_helper[$item['lvl']]][$item['lvl']][2] = array(
      '#type' => 'hidden',
      '#value' => $z,
    );
  }

  // Spell table filters
  $form['spell_filters'] = array(
    '#type' => 'select',
    '#title' => t('Filters'),
    '#options' => array(
      '' => 'No filter',
      'prepared' => 'Only prepared',
    ),
    '#ajax' => array(
      'callback' => 'spell_manager_form_replace',
      'wrapper' => 'form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  if (isset($form_state['values']['spell_filters']) && !empty($form_state['values']['spell_filters'])) {

    _filter_spells($character_spells, $character_spell_data, $form_state['values']['spell_filters']);
  }

  // Spell table order
  $form['spell_order'] = array(
    '#type' => 'select',
    '#title' => t('Order'),
    '#options' => array(
      '' => 'No Order',
      'spell_lvl' => 'Spell Level',
      'alpha_asc' => 'Alpha Asc',
      'alpha_desc' => 'Alpha Desc',
      //'spell_group' => 'Spell Group',
    ),
    '#ajax' => array(
      'callback' => 'spell_manager_form_replace',
      'wrapper' => 'form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  if (isset($form_state['values']['spell_order']) && !empty($form_state['values']['spell_order'])
    && function_exists('_spell_order_' . $form_state['values']['spell_order'])) {

    $func = '_spell_order_' . $form_state['values']['spell_order'];
    uasort($character_spells, $func);
  }

  // Spells table
  foreach ($character_spells as $spell) {
    $row = array();

    $row['prepared'] = array(
      '#type' => 'checkbox',
      '#title' => t('Prepared'),
      '#title_display' => 'invisible',
      '#default_value' => (isset($character_spell_data['prepared'][$spell->spell_id]))? $character_spell_data['prepared'][$spell->spell_id] : 0,
      '#limit_validation_errors' => FALSE,
      '#ajax' => array(
        'callback' => 'spell_manager_form_replace',
        'wrapper' => 'form-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    $spell_lvl = field_view_field('spell', $spell, 'field_spell_level', array('label' => 'hidden'));
    $spell_type = field_view_field('spell', $spell, 'field_spell_type', array('label' => 'hidden'));

    $spell_lvl_mkup = render($spell_lvl);
    $spell_lvl_mkup .= render($spell_type);

    $row['lvl'] = array(
      '#markup' => $spell_lvl_mkup,
      '#attributes' => array(
        'class' => array('level-col'),
      ),
    );

    $row['group'] = array(
      '#markup' => t(implode(', ', $spell->spell_group_title)),
    );

    // Get components if necessary.
    $component_markup = '';
    $has_component = FALSE;
    foreach ($spell->field_spell_components[LANGUAGE_NONE] as $field) {
      if ($field['value'] == 'm') {
        $has_component = TRUE;
      }
    }

    if ($has_component) {
      if ($spell->field_spell_component_consumed[LANGUAGE_NONE][0]['value'] == TRUE) {
        $component_markup .= '<span class="consumed-label">CONSUMED</span>';
      }

      $comp_description = field_view_field('spell', $spell, 'field_spell_component_cost', array('label' => 'hidden'));
      $component_markup .= render($comp_description);

    }

    // Get description field value
    $description = field_view_field('spell', $spell, 'field_spell_description', array('label' => 'hidden'));

    $description_fieldset = array(
      '#theme' => 'fieldset',
      '#title' => 'Description',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#value' => render($description),
      '#attributes' => array(
        'class' => array('collapsible', 'collapsed'),
      ),
    );

    // Get higher level field value
    if (field_get_items('spell', $spell, 'field_spell_higher_level_effects')) {
      $higher_lvl = field_view_field('spell', $spell, 'field_spell_higher_level_effects', array('label' => 'hidden'));

      $higher_lvl_fieldset = array(
        '#theme' => 'fieldset',
        '#title' => 'Higher lvl effects',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#value' => render($higher_lvl),
        '#attributes' => array(
          'class' => array('collapsible', 'collapsed'),
        ),
      );
    }
    else {
      $higher_lvl = FALSE;
      $higher_lvl_fieldset = array();
    }

    $row['spell_description']['title'] = array(
      '#markup' => '<h2>' . $spell->name . '</h2>',// . $component_markup . render($description_fieldset) . render($higher_lvl_fieldset),
    );
    $row['spell_description']['text'] = array(
      '#markup' => $component_markup . render($description_fieldset) . render($higher_lvl_fieldset),
    );

    $d = field_view_field('spell', $spell, 'field_spell_casting_time', array('label' => 'hidden'));
    $row['casting_time'] = array(
      '#markup' => render($d),
    );
    $d = field_view_field('spell', $spell, 'field_spell_range', array('label' => 'hidden'));
    $row['range'] = array(
      '#markup' => render($d),
    );
    $d = field_view_field('spell', $spell, 'field_spell_duration', array('label' => 'hidden'));
    $row['duration'] = array(
      '#markup' => render($d),
    );
    $d = field_view_field('spell', $spell, 'field_spell_components', array('label' => 'hidden'));
    $row['components'] = array(
      '#markup' => render($d),
    );

    $row['spell_id'] = array(
      '#type' => 'hidden',
      '#value' => $spell->spell_id,
    );


    $spell_lvl = (int) $spell->field_spell_level[LANGUAGE_NONE][0]['value'];
    for ($i=0; $i<=9; $i++) {
      $checkbox = array();

      if(($spell_lvl == 0 && $i == 0) || ($spell_lvl > 0 && $i >= $spell_lvl)) {
        $checkbox = array(
          '#type' => 'checkbox',
          '#title' => t('Cast Spell'),
          '#title_display' => 'invisible',
          '#limit_validation_errors' => FALSE,
          '#default_value' => FALSE,
          '#ajax' => array(
            'callback' => 'spell_manager_form_replace',
            'wrapper' => 'form-wrapper',
            'method' => 'replace',
            'effect' => 'fade',
          ),
        );
      }

      $row[$i] = $checkbox;
    }

    $form['spells']['rows'][$spell->spell_id] = $row;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Filter Spells in Spell manager table
 */
function _filter_spells(&$spells, $character_spell_data, $filter_type) {
  switch($filter_type) {
  case 'prepared':
    foreach ($spells as $i => $spell) {
      if (!isset($character_spell_data['prepared'][$spell->spell_id]) || $character_spell_data['prepared'][$spell->spell_id] == FALSE) {
        unset($spells[$i]);
      }
    }
    break;

  default:
    break;
  }
}

function _spell_order_spell_lvl($val1, $val2) {
  if ($val1->returnLvl() == $val2->returnLvl()) {
    return 0;
  }
  return ($val1->returnLvl() < $val2->returnLvl()) ? -1 : 1;
}

function _spell_order_alpha_asc($val1, $val2) {
  return strcasecmp($val1->name, $val2->name);
}

function _spell_order_alpha_desc($val1, $val2) {
  return strcasecmp($val1->name, $val2->name) * -1;
}

function _spell_order_spell_group($val1, $val2) {
  return strcasecmp($val1->spell_group_title, $val2->spell_group_title) * -1;
}

function character_spell_manager_form_validate(&$form, &$form_state) {

  $character = current(entity_load('character', array($form['#character']->char_id)));
  $character_spell_data = $character->getSpellData();
  $spells_by_lvl = array();

  foreach ($character_spell_data['cast'] as $cast) {
    if (!isset($spells_by_lvl[$cast['lvl']]))  {
      $spells_by_lvl[$cast['lvl']] = 1;
    }
    else {
      $spells_by_lvl[$cast['lvl']]++;
    }
  }

  $spell_slots = $character->getSpellSlots();
  $character_lvl = $character->getLvl();

  // Loop through spells.
  foreach ($form_state['values']['spells']['rows'] as $row_id => $row) {
    // TODO: need #of prepared
    /*
    if ($row['prepared'] == TRUE) {
      $character_spell_data['prepared'][$row['spell_id']] = TRUE;
    }
    else {
      $character_spell_data['prepared'][$row['spell_id']] = FALSE;
    }
    */

    for ($i=0; $i<=9; $i++) {
      if (isset($row[$i]) && $row[$i] == TRUE) {
        if ($row['prepared'] == TRUE) {
          if (!isset($spells_by_lvl[$i]))  {
            $spells_by_lvl[$i] = 1;
          }
          else {
            $spells_by_lvl[$i]++;
          }
        }
        else {
          form_set_error(implode('][', $form_state['triggering_element']['#array_parents']), 'Spell is not prepared');
        }
      }
    }
  }

  if ($form_state['triggering_element']['#title'] != 'Remove') {
    foreach ($spells_by_lvl as $lvl => $count) {
      if ($count > $spell_slots[($character_lvl-1)][$lvl]) {
        form_set_error(implode('][', $form_state['triggering_element']['#array_parents']), 'Too many spells for slot lvl ' . $lvl);
      }
    }
  }
}

function character_spell_manager_form_submit(&$form, &$form_state) {

  // Reload character.
  $character = current(entity_load('character', array($form['#character']->char_id)));
  $character_spell_data = $character->getSpellData();

  // Check to see if removed button has been clicked.
  foreach ($form_state['values']['spell_slot_table']['rows'] as $row_id => $row) {
    for ($i=0; $i<9; $i++) {
      if (isset($row[$i][1]) && $row[$i][1] == TRUE) {
        unset($character_spell_data['cast'][$row[$i][2]]);
      }
    }
  }

  // re-key array
  $character_spell_data['cast'] = array_values($character_spell_data['cast']);

  // Loop through spells.
  foreach ($form_state['values']['spells']['rows'] as $row_id => $row) {
    if ($row['prepared'] == TRUE) {
      $character_spell_data['prepared'][$row['spell_id']] = TRUE;
    }
    else {
      $character_spell_data['prepared'][$row['spell_id']] = FALSE;
    }

    for ($i=0; $i<=9; $i++) {
      if (isset($row[$i]) && $row[$i] == TRUE) {
        $character_spell_data['cast'][] = array(
          'spell' => $row['spell_id'],
          'lvl' => $i,
        );
      }
    }
  }

  // Save data.
  $character->saveSpellData($character_spell_data);

  $form_state[''] = TRUE;
}

function spell_manager_form_replace(&$form, &$form_state) {

  foreach (element_children($form['spells']['rows']) as $cell) {
    for ($i=0; $i<=9; $i++) {
      $form['spells']['rows'][$cell][$i]['#checked'] = FALSE;
      unset($form['spells']['rows'][$cell][$i]['#value']);
    }
  }

  return $form;
}

/**
 * Theme callback for the form table.
 */
function theme_spell_slot_table(&$variables) {
  // Get the useful values.
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );

  // Traverse each row.  @see element_chidren().
  foreach (element_children($rows) as $i => $row_index) {
    $row = array();
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      if ($i == 0) {
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'header' => TRUE,
        );
      }
      else {
        $row[] = drupal_render($rows[$row_index][$col_index]);
      }
    }

    // Add the row to the table.
    $content['#rows'][] = $row;
  }

  // Redner the table and return.
  return drupal_render($content);
}

/**
 * Theme callback for the form table.
 */
function theme_spell_table(&$variables) {
  // Get the useful values.
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );

  $count = 0;
  // Traverse each row.  @see element_chidren().
  foreach (element_children($rows) as $row_index) {
    $row = array();
    $row2 = array();
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      if ($col_index === 0) {
        // Render the column form element.
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'rowspan' => 2,
        );

      }
      elseif ($col_index === 'spell_description') {
        // Render the column form element.
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]['title']) . drupal_render($rows[$row_index]['spell_id']),
          'colspan' => 1,
        );
        $row2[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]['text']),
          'colspan' => 4,
        );
      }
      elseif ($col_index === 'spell_id') {


      }
      elseif (in_array($col_index, array('casting_time', 'range', 'duration'))) {
        // Render the column form element.
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'rowspan' => 1,
        );

      }
      elseif (in_array($col_index, array('lvl'))) {
        // Render the column form element.
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'rowspan' => 2,
          'class' => array('spell-level'),
        );

      }
      else {
        // Render the column form element.
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'rowspan' => 2,
        );

      }

    }

    $odds = array('odd', 'even');
    // Add the row to the table.
    $content['#rows'][] = array(
      'data' => $row,
      'class' => array('spell-' . $odds[($count%2)]),
    );
    $content['#rows'][] = array(
      'data' => $row2,
      'class' => array('spell-' . $odds[($count%2)]),
    );

    $count++;
  }

  // Redner the table and return.
  return drupal_render($content);
}


