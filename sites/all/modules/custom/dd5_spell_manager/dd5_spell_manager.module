<?php

function dd5_spell_manager_menu() {
  $items = array();

/*
  $items['spell-manager'] = array(
    'title' => t('Spell manager'),
    'page callback' => 'dd5_spell_manager_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
*/

  $items['character/%character/spell-manager'] = array(
    'title' => t('Spell manager'),
    'page callback' => 'dd5_spell_manager_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['dd5-ajax/spell-manager/spell-prepared/%character/%spell/%'] = array(
    'title' => t('Toggle spell prepared'),
    'page callback' => 'toggle_spell_prepared',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['dd5-ajax/spell-manager/spell-cast/%character/%spell/%/%/%'] = array(
    'title' => t('Toggle spell prepared'),
    'page callback' => 'toggle_spell_cast',
    'page arguments' => array(3, 4, 5, 6, 7),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );




  return $items;
}

function dd5_spell_manager_page($character) {

  $character_spell_data = isset($character->field_spell_data[LANGUAGE_NONE][0]['value'])? unserialize($character->field_spell_data[LANGUAGE_NONE][0]['value']) : Character::spell_data_default();

  // Add JS
  drupal_add_js(drupal_get_path('module', 'dd5_spell_manager') . '/js/spell-manager.js');

  // Initiate variables needed.
  $build = array();
  $character_spells = $character->getSpells();

  // Build slots table.
  $build['spell_slot_table'] = array(
    '#theme' => 'table',
    '#title' => 'Spell Slots per level',
    '#header' => array(
      array('data' => 'Cantrips', 'style' => 'width: 1px'),
      array('data' => '1st', 'style' => 'width: 1px'),
      array('data' => '2nd', 'style' => 'width: 1px'),
      array('data' => '3rd', 'style' => 'width: 1px'),
      array('data' => '4th', 'style' => 'width: 1px'),
      array('data' => '5th', 'style' => 'width: 1px'),
      array('data' => '6th', 'style' => 'width: 1px'),
      array('data' => '7th', 'style' => 'width: 1px'),
      array('data' => '8th', 'style' => 'width: 1px'),
      array('data' => '9th', 'style' => 'width: 1px'),
    ),
    '#rows' => array(),
  );

  // First row is another header row, indicating number of slots.
  $spell_slots = $character->getSpellSlots();
  $character_lvl = $character->getLvl();

  $row = array();

  for ($i=0; $i<=9; $i++) {
    $row[] = array(
      'data' => $spell_slots[($character_lvl - 1)][$i],
      'header' => TRUE,
    );
    $row2[] = array(
      'data' => '',
    );
  }
  $build['spell_slot_table']['#rows'][] = $row;
  $build['spell_slot_table']['#rows'][] = $row2;

  foreach ($character_spell_data['cast'] as $item) {
    $spell = current(entity_load('spell', array($item['spell'])));

    if ($build['spell_slot_table']['#rows'][1][$item['lvl']]['data'] != '') {
      $build['spell_slot_table']['#rows'][1][$item['lvl']]['data'] .= '<br />';
    }

    $build['spell_slot_table']['#rows'][1][$item['lvl']]['data'] .= $spell->name;
  }

  // build spells table.
  $build['spell_table'] = array(
    '#theme' => 'table',
    '#header' => array(
      array('data' => 'Prepared', 'style' => 'width: 1px'),
      array('data' => 'Spell group', 'style' => 'width: 1px'),
      'Spell',
      array('data' => 'SP Lvl', 'style' => 'width: 1px'),
      array('data' => '0', 'style' => 'width: 1px'),
      array('data' => '1', 'style' => 'width: 1px'),
      array('data' => '2', 'style' => 'width: 1px'),
      array('data' => '3', 'style' => 'width: 1px'),
      array('data' => '4', 'style' => 'width: 1px'),
      array('data' => '5', 'style' => 'width: 1px'),
      array('data' => '6', 'style' => 'width: 1px'),
      array('data' => '7', 'style' => 'width: 1px'),
      array('data' => '8', 'style' => 'width: 1px'),
      array('data' => '9', 'style' => 'width: 1px'),
    ),
    '#rows' => array(),
  );

  foreach ($character_spells as $spell) {
    $row = array();

    // Prepared checkbox.
    $prepared = array(
      'data' => array(
        '#theme' => 'checkbox',
        '#attributes' => array(
          'class' => array('spell-prepared-toggle'),
          'data-spell-id' => $spell->spell_id,
          'data-char-id' => $character->char_id,
        ),
      ),
    );

    if (in_array($spell->spell_id, $character_spell_data['prepared'])) {
      $prepared['data']['#attributes']['checked'] = 'checked';
    }

    $row[] = $prepared;

    // Title
    $row[] = t($spell->spell_group_title);

    // Add collapsable fieldset library.
    drupal_add_library('system', 'drupal.collapse');

    // Get description field value
    $description = field_view_field('spell', $spell, 'field_spell_description', array('label' => 'hidden'));

    $description_fieldset = array(
      '#theme' => 'fieldset',
      '#title' => 'Description',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#value' => render($description),
      '#attributes' => array(
        'class' => array('collapsible', 'collapsed'),
      ),
    );

    // Get higher level field value
    if (field_get_items('spell', $spell, 'field_spell_higher_level_effects')) {
      $higher_lvl = field_view_field('spell', $spell, 'field_spell_higher_level_effects', array('label' => 'hidden'));

      $higher_lvl_fieldset = array(
        '#theme' => 'fieldset',
        '#title' => 'Higher lvl effects',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#value' => render($higher_lvl),
        '#attributes' => array(
          'class' => array('collapsible', 'collapsed'),
        ),
      );
    }
    else {
      $higher_lvl = FALSE;
      $higher_lvl_fieldset = array();
    }

    $row[] = array('data' => '<h2>' . $spell->name . '</h2>' . render($description_fieldset) . render($higher_lvl_fieldset));

    $spell_lvl = $spell->field_spell_level[LANGUAGE_NONE][0]['value'];
    $row[] = ($spell_lvl == 0)? 'Cantrip' : $spell_lvl;

    for ($i=0; $i<=9; $i++) {
      $checkboxes = array();

      if(($spell_lvl == 0 && $i == 0) || ($spell_lvl > 0 && $i >= $spell_lvl)) {
        $checkboxes = array(
          '#theme' => 'checkbox',
          '#attributes' => array(
            'class' => array('spell-cast-toggle'),
            'data-spell-id' => $spell->spell_id,
            'data-char-id' => $character->char_id,
            'data-spell-slot-level' => $i,
          ),
        );
      }

      $row[] = array('data' => $checkboxes);
    }

    $build['spell_table']['#rows'][] = $row;
  }

  return $build;
}











function toggle_spell_prepared($character, $spell, $value) {
  $character_spell_data = isset($character->field_spell_data[LANGUAGE_NONE][0]['value'])? unserialize($character->field_spell_data[LANGUAGE_NONE][0]['value']) : Character::spell_data_default();

  if ($value === 'true') {
    $character_spell_data['prepared'][] = $spell->spell_id;
    $character_spell_data['prepared'] = array_unique($character_spell_data['prepared']);
    sort($character_spell_data['prepared']);
  }
  else {
    $character_spell_data['prepared'] = array_diff($character_spell_data['prepared'], array($spell->spell_id));
    sort($character_spell_data['prepared']);
  }
  $character->field_spell_data[LANGUAGE_NONE][0]['value'] = serialize($character_spell_data);

  $character->save();

  return drupal_json_output(array('status' => 'success'));
}

function toggle_spell_cast($character, $spell, $lvl, $delta, $value) {

  $character_spell_data = isset($character->field_spell_data[LANGUAGE_NONE][0]['value'])? unserialize($character->field_spell_data[LANGUAGE_NONE][0]['value']) : Character::spell_data_default();

  if ($value === 'true') {
    //$character_spell_data['cast'][$lvl][$delta][] = $spell->spell_id;
    //$character_spell_data['cast'][$lvl][$delta] = array_unique($character_spell_data['cast'][$lvl][$delta]);
    $character_spell_data['cast'][] = array(
      'spell' => $spell->spell_id,
      'lvl' => $lvl,
    );
  }
  /*
  else {
    $character_spell_data['cast'][$lvl][$delta] = array_diff($character_spell_data['cast'][$lvl][$delta], array($spell->spell_id));
  }
  */

  $character->field_spell_data[LANGUAGE_NONE][0]['value'] = serialize($character_spell_data);

  $character->save();

  return drupal_json_output(array('status' => 'success'));
}








